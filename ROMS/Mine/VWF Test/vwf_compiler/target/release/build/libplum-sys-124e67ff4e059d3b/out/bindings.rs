/* automatically generated by rust-bindgen 0.69.5 */

pub const PLUM_COLOR_32: plum_flags = 0;
pub const PLUM_COLOR_64: plum_flags = 1;
pub const PLUM_COLOR_16: plum_flags = 2;
pub const PLUM_COLOR_32X: plum_flags = 3;
pub const PLUM_COLOR_MASK: plum_flags = 3;
pub const PLUM_ALPHA_INVERT: plum_flags = 4;
pub const PLUM_PALETTE_NONE: plum_flags = 0;
pub const PLUM_PALETTE_LOAD: plum_flags = 512;
pub const PLUM_PALETTE_GENERATE: plum_flags = 1024;
pub const PLUM_PALETTE_FORCE: plum_flags = 1536;
pub const PLUM_PALETTE_MASK: plum_flags = 1536;
pub const PLUM_SORT_LIGHT_FIRST: plum_flags = 0;
pub const PLUM_SORT_DARK_FIRST: plum_flags = 2048;
pub const PLUM_ALPHA_REMOVE: plum_flags = 256;
pub const PLUM_SORT_EXISTING: plum_flags = 4096;
pub const PLUM_PALETTE_REDUCE: plum_flags = 8192;
pub type plum_flags = ::std::os::raw::c_uint;
pub const PLUM_IMAGE_NONE: plum_image_types = 0;
pub const PLUM_IMAGE_BMP: plum_image_types = 1;
pub const PLUM_IMAGE_GIF: plum_image_types = 2;
pub const PLUM_IMAGE_PNG: plum_image_types = 3;
pub const PLUM_IMAGE_APNG: plum_image_types = 4;
pub const PLUM_IMAGE_JPEG: plum_image_types = 5;
pub const PLUM_IMAGE_PNM: plum_image_types = 6;
pub const PLUM_NUM_IMAGE_TYPES: plum_image_types = 7;
pub type plum_image_types = ::std::os::raw::c_uint;
pub const PLUM_METADATA_NONE: plum_metadata_types = 0;
pub const PLUM_METADATA_COLOR_DEPTH: plum_metadata_types = 1;
pub const PLUM_METADATA_BACKGROUND: plum_metadata_types = 2;
pub const PLUM_METADATA_LOOP_COUNT: plum_metadata_types = 3;
pub const PLUM_METADATA_FRAME_DURATION: plum_metadata_types = 4;
pub const PLUM_METADATA_FRAME_DISPOSAL: plum_metadata_types = 5;
pub const PLUM_METADATA_FRAME_AREA: plum_metadata_types = 6;
pub const PLUM_NUM_METADATA_TYPES: plum_metadata_types = 7;
pub type plum_metadata_types = ::std::os::raw::c_uint;
pub const PLUM_DISPOSAL_NONE: plum_frame_disposal_methods = 0;
pub const PLUM_DISPOSAL_BACKGROUND: plum_frame_disposal_methods = 1;
pub const PLUM_DISPOSAL_PREVIOUS: plum_frame_disposal_methods = 2;
pub const PLUM_DISPOSAL_REPLACE: plum_frame_disposal_methods = 3;
pub const PLUM_DISPOSAL_BACKGROUND_REPLACE: plum_frame_disposal_methods = 4;
pub const PLUM_DISPOSAL_PREVIOUS_REPLACE: plum_frame_disposal_methods = 5;
pub const PLUM_NUM_DISPOSAL_METHODS: plum_frame_disposal_methods = 6;
pub type plum_frame_disposal_methods = ::std::os::raw::c_uint;
pub const PLUM_OK: plum_errors = 0;
pub const PLUM_ERR_INVALID_ARGUMENTS: plum_errors = 1;
pub const PLUM_ERR_INVALID_FILE_FORMAT: plum_errors = 2;
pub const PLUM_ERR_INVALID_METADATA: plum_errors = 3;
pub const PLUM_ERR_INVALID_COLOR_INDEX: plum_errors = 4;
pub const PLUM_ERR_TOO_MANY_COLORS: plum_errors = 5;
pub const PLUM_ERR_UNDEFINED_PALETTE: plum_errors = 6;
pub const PLUM_ERR_IMAGE_TOO_LARGE: plum_errors = 7;
pub const PLUM_ERR_NO_DATA: plum_errors = 8;
pub const PLUM_ERR_NO_MULTI_FRAME: plum_errors = 9;
pub const PLUM_ERR_FILE_INACCESSIBLE: plum_errors = 10;
pub const PLUM_ERR_FILE_ERROR: plum_errors = 11;
pub const PLUM_ERR_OUT_OF_MEMORY: plum_errors = 12;
pub const PLUM_NUM_ERRORS: plum_errors = 13;
pub type plum_errors = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct plum_buffer {
    pub size: usize,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_plum_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<plum_buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<plum_buffer>(),
        16usize,
        concat!("Size of: ", stringify!(plum_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<plum_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(plum_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_buffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_buffer),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct plum_callback {
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub userdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_plum_callback() {
    const UNINIT: ::std::mem::MaybeUninit<plum_callback> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<plum_callback>(),
        16usize,
        concat!("Size of: ", stringify!(plum_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<plum_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(plum_callback))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_callback),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_callback),
            "::",
            stringify!(userdata)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct plum_metadata {
    pub type_: ::std::os::raw::c_int,
    pub size: usize,
    pub data: *mut ::std::os::raw::c_void,
    pub next: *mut plum_metadata,
}
#[test]
fn bindgen_test_layout_plum_metadata() {
    const UNINIT: ::std::mem::MaybeUninit<plum_metadata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<plum_metadata>(),
        32usize,
        concat!("Size of: ", stringify!(plum_metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<plum_metadata>(),
        8usize,
        concat!("Alignment of ", stringify!(plum_metadata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_metadata),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_metadata),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_metadata),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_metadata),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct plum_image {
    pub type_: u16,
    pub max_palette_index: u8,
    pub color_format: u8,
    pub frames: u32,
    pub height: u32,
    pub width: u32,
    pub allocator: *mut ::std::os::raw::c_void,
    pub metadata: *mut plum_metadata,
    pub palette: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_void,
    pub userdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_plum_image() {
    const UNINIT: ::std::mem::MaybeUninit<plum_image> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<plum_image>(),
        56usize,
        concat!("Size of: ", stringify!(plum_image))
    );
    assert_eq!(
        ::std::mem::align_of::<plum_image>(),
        8usize,
        concat!("Alignment of ", stringify!(plum_image))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_image),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_palette_index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_image),
            "::",
            stringify!(max_palette_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_format) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_image),
            "::",
            stringify!(color_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frames) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_image),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_image),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_image),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_image),
            "::",
            stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_image),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).palette) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_image),
            "::",
            stringify!(palette)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_image),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_image),
            "::",
            stringify!(userdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plum_rectangle {
    pub left: u32,
    pub top: u32,
    pub width: u32,
    pub height: u32,
}
#[test]
fn bindgen_test_layout_plum_rectangle() {
    const UNINIT: ::std::mem::MaybeUninit<plum_rectangle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<plum_rectangle>(),
        16usize,
        concat!("Size of: ", stringify!(plum_rectangle))
    );
    assert_eq!(
        ::std::mem::align_of::<plum_rectangle>(),
        4usize,
        concat!("Alignment of ", stringify!(plum_rectangle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_rectangle),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_rectangle),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_rectangle),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(plum_rectangle),
            "::",
            stringify!(height)
        )
    );
}
extern "C" {
    pub fn plum_new_image() -> *mut plum_image;
}
extern "C" {
    pub fn plum_copy_image(image: *const plum_image) -> *mut plum_image;
}
extern "C" {
    pub fn plum_destroy_image(image: *mut plum_image);
}
extern "C" {
    pub fn plum_load_image(
        buffer: *const ::std::os::raw::c_void,
        size_mode: usize,
        flags: ::std::os::raw::c_uint,
        error: *mut ::std::os::raw::c_uint,
    ) -> *mut plum_image;
}
extern "C" {
    pub fn plum_load_image_limited(
        buffer: *const ::std::os::raw::c_void,
        size_mode: usize,
        flags: ::std::os::raw::c_uint,
        limit: usize,
        error: *mut ::std::os::raw::c_uint,
    ) -> *mut plum_image;
}
extern "C" {
    pub fn plum_store_image(
        image: *const plum_image,
        buffer: *mut ::std::os::raw::c_void,
        size_mode: usize,
        error: *mut ::std::os::raw::c_uint,
    ) -> usize;
}
extern "C" {
    pub fn plum_validate_image(image: *const plum_image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn plum_get_error_text(error: ::std::os::raw::c_uint) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn plum_get_file_format_name(
        format: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn plum_get_version_number() -> u32;
}
extern "C" {
    pub fn plum_check_valid_image_size(
        width: u32,
        height: u32,
        frames: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plum_check_limited_image_size(
        width: u32,
        height: u32,
        frames: u32,
        limit: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plum_color_buffer_size(size: usize, flags: ::std::os::raw::c_uint) -> usize;
}
extern "C" {
    pub fn plum_pixel_buffer_size(image: *const plum_image) -> usize;
}
extern "C" {
    pub fn plum_palette_buffer_size(image: *const plum_image) -> usize;
}
extern "C" {
    pub fn plum_rotate_image(
        image: *mut plum_image,
        count: ::std::os::raw::c_uint,
        flip: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn plum_convert_colors(
        destination: *mut ::std::os::raw::c_void,
        source: *const ::std::os::raw::c_void,
        count: usize,
        to: ::std::os::raw::c_uint,
        from: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn plum_convert_color(
        color: u64,
        from: ::std::os::raw::c_uint,
        to: ::std::os::raw::c_uint,
    ) -> u64;
}
extern "C" {
    pub fn plum_remove_alpha(image: *mut plum_image);
}
extern "C" {
    pub fn plum_sort_palette(
        image: *mut plum_image,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn plum_sort_palette_custom(
        image: *mut plum_image,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: u64) -> u64,
        >,
        argument: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn plum_reduce_palette(image: *mut plum_image) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn plum_validate_palette_indexes(image: *const plum_image) -> *const u8;
}
extern "C" {
    pub fn plum_get_highest_palette_index(image: *const plum_image) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plum_convert_colors_to_indexes(
        destination: *mut u8,
        source: *const ::std::os::raw::c_void,
        palette: *mut ::std::os::raw::c_void,
        count: usize,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plum_convert_indexes_to_colors(
        destination: *mut ::std::os::raw::c_void,
        source: *const u8,
        palette: *const ::std::os::raw::c_void,
        count: usize,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn plum_sort_colors(
        colors: *const ::std::os::raw::c_void,
        max_index: u8,
        flags: ::std::os::raw::c_uint,
        result: *mut u8,
    );
}
extern "C" {
    pub fn plum_malloc(image: *mut plum_image, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn plum_calloc(image: *mut plum_image, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn plum_realloc(
        image: *mut plum_image,
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn plum_free(image: *mut plum_image, buffer: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn plum_allocate_metadata(image: *mut plum_image, size: usize) -> *mut plum_metadata;
}
extern "C" {
    pub fn plum_append_metadata(
        image: *mut plum_image,
        type_: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn plum_find_metadata(
        image: *const plum_image,
        type_: ::std::os::raw::c_int,
    ) -> *mut plum_metadata;
}
